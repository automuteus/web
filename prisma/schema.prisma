generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String  @map("provider_type")
  provider           String  @map("provider_id")
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @map("refresh_token")
  access_token       String? @map("access_token")
  expires_at         Int?    @map("access_token_expires")
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  createdAt          DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?       @map("email_verified")
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime        @default(now()) @map("updated_at") @db.Timestamptz(6)
  image         String?
  accounts      Account[]
  sessions      Session[]
  guilds        GuildsOnUsers[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_requests")
}

model Guild {
  name          String          @db.VarChar(100)
  icon          String?         @db.Text
  premium       Int             @db.SmallInt
  txn_time_unix Int?            @db.Integer
  guild_id      String          @id @unique
  last_updated  DateTime?       @default(now()) @db.Timestamp(6)
  users         GuildsOnUsers[]

  @@map("guilds")
}

model GuildsOnUsers {
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @map("user_id")
  guild       Guild    @relation(fields: [guildId], references: [guild_id])
  guildId     String   @map("guild_id")
  active      Boolean? @db.Boolean
  permissions String?  @db.VarChar(32)


  @@id([userId, guildId])
  @@map("users_guilds")
}
